// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  clerkUserId   String   @unique
  email         String   @unique
  name          String?
  imageUrl      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  news          News[]
  tournaments   Tournament[] // Relación con torneos creados por el usuario
}

model News {
  id            String    @id @default(uuid())
  title         String
  summary       String?   // Resumen corto para vistas previas
  content       String
  coverImageUrl String?   // Imagen destacada (opcional)
  published     Boolean   @default(false) // Para controlar si ya está visible o en borrador
  publishedAt   DateTime  @default(now()) // Fecha de publicación  
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([userId])
}

// Nuevos modelos para empezar a implementar torneos y partidos 27/07/2025

enum TournamentStatus {
  PENDIENTE   // Aún no empieza
  ACTIVO    // En curso
  FINALIZADO  // Ya terminó
}

enum TournamentCategory {
  LIBRE
  SENIOR
  SUB_17
  RESERVA
  PRIMERA
  VETERANO
  PREVETERANO
  FEMENINO
  INFANTIL
}

enum TournamentFormat {
  LIGA
  COPA
  ELIMINACION_DIRECTA
  GRUPOS
  IDA_Y_VUELTA
}


model Tournament {
  id          String           @id @default(uuid())
  name        String
  description String?
  category    TournamentCategory
  locality    String
  logoUrl     String?    // URL del escudo/logo
  liga        String?    // Nombre de la liga o asociación organizadora
  status      TournamentStatus @default(PENDIENTE)
  format      TournamentFormat @default(LIGA)
  nextMatch   DateTime?
  homeAndAway Boolean @default(false) // Si el torneo es de ida y vuelta o solo un partido
  enabled     Boolean    @default(true) // ⬅️ Campo nuevo para indicar si está habilitado


  startDate   DateTime
  endDate     DateTime?

  
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  teams       Team[]  // Relación con equipos
  matches     Match[] // Relación con partidos  
  standing    Standing[]  // Tabla de posiciones del torneo
  phase     Phase[] // Fases del torneo (ej: octavos, cuartos, semifinales, final)
}

model Team {
  id          String     @id @default(uuid())
  name        String
  shortName   String?    // Nombre corto para mostrar en tablas
  description String?
  history     String?    // Breve historia del equipo  
  coach       String?    // Nombre del entrenador
  homeCity    String?    // Ciudad base del equipo
  yearFounded String?       // Año de fundación
  homeColor   String?    // Color principal del equipo
  awayColor   String?    // Color secundario del equipo
  logoUrl     String?    // URL del escudo/logo
  enabled     Boolean    @default(true) // ⬅️ Campo nuevo para indicar si está habilitado

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  tournament  Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  tournamentId String

  players     Player[]   // Más adelante, podés usar esto  
  standing      Standing[] // Tabla de posiciones del torneo

  matchesAsHome Match[] @relation("HomeTeam")   // Relación con partidos como local
  matchesAsAway Match[] @relation("AwayTeam")   // Relación con partidos como visitante
}

enum Foot {
  IZQUIERDA
  DERECHA
  AMBOS
}

model Player {
  id           String   @id @default(uuid())
  name         String
  birthDate    DateTime?  // Fecha de nacimiento
  birthPlace   String?    // Lugar de nacimiento
  height       Int?       // cm
  weight       Int?       // kg
  dominantFoot Foot?      // Pie dominante
  position     String?
  number       Int?
  imageUrl     String?
  description  String?
  bio          String?

  teamId       String
  team         Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  goals       Goal[]

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum MatchStatus {
  PROGRAMADO // Programado
  EN_JUEGO // En juego
  TERMINADO // Terminado
  CANCELADO // Cancelado o suspendido
}

model Match {
  id            String       @id @default(uuid())
  dateTime      DateTime
  stadium       String?
  city          String?
  description   String?
  status        MatchStatus  @default(PROGRAMADO)

  homeScore     Int?
  awayScore     Int?

  tournament    Tournament   @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  tournamentId  String

  homeTeam      Team         @relation("HomeTeam", fields: [homeTeamId], references: [id])
  homeTeamId    String      // ID del equipo local

  awayTeam      Team         @relation("AwayTeam", fields: [awayTeamId], references: [id])
  awayTeamId    String      // ID del equipo visitante

  goals         Goal[]

  // Si el partido termino por penales
  penaltyWinnerTeamId String?   // Team que ganó por penales
  penaltyScoreHome    Int?
  penaltyScoreAway    Int?

  
  phaseId String?
  phase   Phase? @relation(fields: [phaseId], references: [id])

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Goal {
  id        String   @id @default(uuid())
  minute    Int?     // minuto en que se hizo el gol
  isOwnGoal Boolean  @default(false)  // Si es un autogol
  isPenalty Boolean  @default(false)  // Si es un penal

  matchId   String
  match     Match    @relation(fields: [matchId], references: [id], onDelete: Cascade)

  playerId  String
  player    Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Standing {
  id           String   @id @default(uuid())
  tournamentId String
  teamId       String

  matchesPlayed Int     @default(0)
  wins          Int     @default(0)
  draws         Int     @default(0)
  losses        Int     @default(0)
  goalsFor      Int     @default(0)
  goalsAgainst  Int     @default(0)
  goalDifference Int    @default(0)
  points        Int     @default(0)

  team       Team       @relation(fields: [teamId], references: [id], onDelete: Cascade)
  tournament Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)

  @@unique([tournamentId, teamId])
}

enum PhaseName {
  DIECISAVOS_DE_FINAL
  OCTAVOS_DE_FINAL
  CUARTOS_DE_FINAL
  SEMIFINAL
  FINAL
}

model Phase {
  id           String   @id @default(uuid())
  name         PhaseName  @default(DIECISAVOS_DE_FINAL)
  order        Int      // para ordenarlas fácilmente
  tournamentId String

  tournament   Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  matches      Match[]

  @@unique([tournamentId, name])
}