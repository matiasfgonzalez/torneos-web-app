// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  ORGANIZER
  USER
}

model User {
  id            String   @id @default(uuid())
  clerkUserId   String   @unique
  email         String   @unique
  name          String?
  imageUrl      String?
  role          UserRole? @default(USER)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  news          News[]
  tournaments   Tournament[] // Relación con torneos creados por el usuario
  teams         Team[]       // Relación con equipos creados por el usuario
  auditLogs     AuditLog[]  // Relación con los registros de auditoría
}

model News {
  id            String    @id @default(uuid())
  title         String
  summary       String?   // Resumen corto para vistas previas
  content       String
  coverImageUrl String?   // Imagen destacada (opcional)
  published     Boolean   @default(false) // Para controlar si ya está visible o en borrador
  publishedAt   DateTime  @default(now()) // Fecha de publicación  
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([userId])
}

// Nuevos modelos para empezar a implementar torneos y partidos 27/07/2025

enum TournamentStatus {
  BORRADOR      // Configurando, no visible al público
  INSCRIPCION   // Inscripción abierta
  PENDIENTE     // Aún no empieza
  ACTIVO        // En curso
  SUSPENDIDO    // Pausado temporalmente
  FINALIZADO    // Ya terminó
  CANCELADO     // No se va a realizar
  ARCHIVADO     // Guardado como histórico
}

enum TournamentCategory {
  LIBRE
  SENIOR
  SUB_17
  SUB_20
  RESERVA
  PRIMERA
  SEGUNDA         // o categorías por divisiones A, B, C...
  VETERANO
  PREVETERANO
  SUPERVETERANO   // mayores de 50/55
  FEMENINO
  MASCULINO
  INFANTIL
  MINI            // los más pequeños
  ESCUELITA       // formativo
  MIXTO           // hombres y mujeres juntos
  MASTER          // categoría especial para mayores
  JUVENIL         // genérico, por ej. 13 a 18 años
  M30
}

enum TournamentFormat {
  LIGA                 // Todos contra todos
  COPA                 // Similar a eliminación pero con rondas
  ELIMINACION_DIRECTA  // Knockout
  DOBLE_ELIMINACION    // Pierde dos veces y queda afuera
  GRUPOS               // Fase de grupos
  IDA_Y_VUELTA         // Partido de ida y vuelta
  ROUND_ROBIN          // Todos contra todos, puede repetirse varias vueltas
  SUIZO                // Emparejamientos según rendimiento
  MIXTO                // Combina grupos + eliminación
  PLAYOFFS             // Serie final tipo cuartos, semi, final
  LIGUILLA             // Mini liga entre clasificados
  TODOS_CONTRA_TODOS   // Variante explícita de liga
  PUNTOS_ACUMULADOS    // Por sumatoria de puntos en distintas fechas
  AMISTOSO              // Partidos sin eliminación ni liga fija
}


model Tournament {
  id          String           @id @default(uuid())
  name        String
  description String?
  category    TournamentCategory
  locality    String
  logoUrl     String?    // URL del escudo/logo
  liga        String?    // Nombre de la liga o asociación organizadora
  status      TournamentStatus @default(PENDIENTE)
  format      TournamentFormat @default(LIGA)
  nextMatch   DateTime?
  homeAndAway Boolean @default(false) // Si el torneo es de ida y vuelta o solo un partido
  enabled     Boolean    @default(true) // ⬅️ Campo nuevo para indicar si está habilitado
  rules       String?   // Guardar un reglamento, reglas especiales o configuraciones personalizadas del torneo
  trophy      String?   // descripción del premio
  deletedAt   DateTime?   // Fecha de eliminación lógica (si aplica)


  startDate   DateTime
  endDate     DateTime?
  
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  matches     Match[] // Relación con partidos  
  tournamentTeams TournamentTeam[] // 🔁 Relación M:N con torneos
  
  phaseId     String?
  phase       Phase?    @relation(fields: [phaseId], references: [id])
}

model Team {
  id          String     @id @default(uuid())
  name        String
  shortName   String?    // Nombre corto para mostrar en tablas
  description String?
  history     String?    // Breve historia del equipo  
  coach       String?    // Nombre del entrenador
  homeCity    String?    // Ciudad base del equipo
  yearFounded String?       // Año de fundación
  homeColor   String?    // Color principal del equipo
  awayColor   String?    // Color secundario del equipo
  logoUrl     String?    // URL del escudo/logo
  enabled     Boolean    @default(true) // ⬅️ Campo nuevo para indicar si está habilitado
  deletedAt   DateTime?   // Fecha de eliminación lógica (si aplica)

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  tournamentTeams TournamentTeam[] // 🔁 Relación M:N con equipos

  userId String?
  user   User? @relation(fields: [userId], references: [id])

}

enum Foot {
  IZQUIERDA
  DERECHA
  AMBOS
}

enum PlayerStatus {
  ACTIVO
  LESIONADO
  SUSPENDIDO
  NO_DISPONIBLE
  RETIRADO
  TRANSFERIDO
  PRUEBA
  EXPULSADO
}

enum PlayerPosition {
  // Arquero
  ARQUERO

  // Defensas
  DEFENSOR_CENTRAL
  LATERAL_DERECHO
  LATERAL_IZQUIERDO
  CARRILERO_DERECHO
  CARRILERO_IZQUIERDO

  // Mediocampistas
  VOLANTE_DEFENSIVO
  PIVOTE
  VOLANTE_CENTRAL
  VOLANTE_OFENSIVO
  INTERIOR_DERECHO
  INTERIOR_IZQUIERDO
  ENGANCHE

  // Delanteros
  EXTREMO_DERECHO
  EXTREMO_IZQUIERDO
  DELANTERO_CENTRO
  SEGUNDO_DELANTERO
  FALSO_9
}


model Player {
  id           String   @id @default(uuid())
  name         String
  birthDate    DateTime?  // Fecha de nacimiento
  birthPlace   String?    // Lugar de nacimiento
  nationality  String?
  height       Float?       // cm
  weight       Float?       // kg
  dominantFoot Foot?         // Pie dominante
  position     PlayerPosition?
  number       Int?
  imageUrl     String?
  imageUrlFace     String?
  description  String?
  bio          String?
  status       PlayerStatus @default(ACTIVO)
  joinedAt     DateTime?

  instagramUrl String?
  twitterUrl   String?

  teamPlayer    TeamPlayer[]  // 🔁 Relación M:N

  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

enum MatchStatus {
  PROGRAMADO      // Programado
  EN_JUEGO        // En curso
  ENTRETIEMPO     // Pausa entre tiempos
  FINALIZADO      // Terminado
  SUSPENDIDO      // Suspendido temporalmente (clima, incidentes, etc.)
  POSTERGADO      // Reprogramado para otra fecha
  CANCELADO       // Anulado, no se jugará
  WALKOVER        // Ganado por incomparecencia del rival
}

model Match {
  id            String       @id @default(uuid())
  dateTime      DateTime
  stadium       String?
  city          String?
  description   String?
  status        MatchStatus  @default(PROGRAMADO)

  homeScore     Int?
  awayScore     Int?

  tournament    Tournament   @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  tournamentId  String

  homeTeamId   String
  homeTeam     TournamentTeam  @relation("HomeMatches", fields: [homeTeamId], references: [id])

  awayTeamId   String
  awayTeam     TournamentTeam  @relation("AwayMatches", fields: [awayTeamId], references: [id])

  goals         Goal[]

  // Si el partido termino por penales
  penaltyWinnerTeamId String?
  penaltyWinnerTeam   TournamentTeam? @relation("PenaltyWinner", fields: [penaltyWinnerTeamId], references: [id])

  penaltyScoreHome    Int?
  penaltyScoreAway    Int?

  roundNumber Int?   // útil para fases tipo ligas o grupos

  
  phaseId String?
  phase   Phase? @relation(fields: [phaseId], references: [id])

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Goal {
  id        String   @id @default(uuid())
  minute    Int?     // minuto en que se hizo el gol
  isOwnGoal Boolean  @default(false)  // Si es un autogol
  isPenalty Boolean  @default(false)  // Si es un penal

  matchId   String
  match     Match    @relation(fields: [matchId], references: [id], onDelete: Cascade)

  teamPlayerId  String
  teamPlayer    TeamPlayer   @relation(fields: [teamPlayerId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TournamentTeam {
  id           String   @id @default(uuid()) // ID único del registro

  tournamentId String                         // FK al torneo
  tournament   Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade) // Relación al torneo (si se elimina el torneo, se elimina esta relación)

  teamId       String                         // FK al equipo
  team         Team       @relation(fields: [teamId], references: [id], onDelete: Cascade)       // Relación al equipo (si se elimina el equipo, se elimina esta relación)

  group        String?   // Grupo al que pertenece el equipo en el torneo (ej: "A", "B", etc.)
  isEliminated Boolean?  // Indica si el equipo fue eliminado del torneo
  notes        String?   // Notas adicionales (observaciones, comentarios)

  matchesPlayed Int     @default(0) // Partidos jugados
  wins          Int     @default(0) // Partidos ganados
  draws         Int     @default(0) // Partidos empatados
  losses        Int     @default(0) // Partidos perdidos
  goalsFor      Int     @default(0) // Goles a favor
  goalsAgainst  Int     @default(0) // Goles en contra
  goalDifference Int    @default(0) // Diferencia de gol (goles a favor - goles en contra)
  points        Int     @default(0) // Puntos obtenidos

  createdAt    DateTime @default(now()) // Fecha de creación del registro
  updatedAt    DateTime @updatedAt      // Fecha de última actualización

  // 🔹 Relaciones inversas
  homeMatches Match[] @relation("HomeMatches")
  awayMatches Match[] @relation("AwayMatches")

  penaltyWins Match[] @relation("PenaltyWinner")

  teamPlayer    TeamPlayer[]  // 🔁 Relación M:N

  @@unique([tournamentId, teamId]) // Un equipo no puede repetirse en el mismo torneo
}


model TeamPlayer {
  id        String   @id @default(uuid()) // ID único del registro

  tournamentTeamId   String
  tournamentTeam     TournamentTeam   @relation(fields: [tournamentTeamId], references: [id], onDelete: Cascade) // Relación al equipo dentro del torneo

  playerId  String                          // FK al jugador
  player    Player @relation(fields: [playerId], references: [id], onDelete: Cascade) // Relación al jugador

  joinedAt  DateTime @default(now()) // Fecha en la que el jugador se unió al equipo
  leftAt    DateTime?               // Fecha en la que dejó el equipo (si aplica)

  position     String?              // Posición que ocupa en el equipo (ej: "delantero", "defensor", etc.)
  number       Int?                 // Número de camiseta
  status       PlayerStatus @default(ACTIVO) // Estado del jugador (activo, lesionado, suspendido, etc.)

  goals       Goal[]

  createdAt DateTime @default(now()) // Fecha de creación del registro
  updatedAt DateTime @updatedAt      // Fecha de última actualización

  @@unique([playerId, tournamentTeamId]) // Evita que un jugador esté duplicado en el mismo equipo
}


enum PhaseName {
  FECHA
  CRUCES
  FASES_DE_GRUPOS
  DIECISAVOS_DE_FINAL
  OCTAVOS_DE_FINAL
  CUARTOS_DE_FINAL
  SEMIFINAL
  FINAL
}

model Phase {
  id           String    @id @default(uuid())
  name         PhaseName @default(DIECISAVOS_DE_FINAL)
  order        Int

  tournaments   Tournament[]
  matches      Match[]

  @@unique([name, order])
}

model AuditLog {
  id        String   @id @default(uuid())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  action    String
  entity    String
  entityId  String
  payload   Json?
  createdAt DateTime @default(now())
}